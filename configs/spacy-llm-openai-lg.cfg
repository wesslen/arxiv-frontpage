[paths]
train = null
dev = null
vectors = null
init_tok2vec = null

[system]
seed = 0
gpu_allocator = null

[nlp]
lang = "en"
pipeline = ["llm"]
disabled = []
before_creation = null
after_creation = null
after_pipeline_creation = null
batch_size = 1000
tokenizer = {"@tokenizers":"spacy.Tokenizer.v1"}

[components]

[components.llm]
factory = "llm"
save_io = "True"
validate_types = true

[components.llm.cache]
@llm_misc = "spacy.BatchCache.v1"
path = "configs/openai-cache-lg"
batch_size = 3
max_batches_in_mem = 4

[components.llm.model]
@llm_models = "spacy.GPT-3-5.v1"
name = "gpt-3.5-turbo"
strict = true
max_tries = 5
interval = 1.0
max_request_time = 30

[components.llm.model.config]
temperature = 0.3

[components.llm.task]
@llm_tasks = "spacy.TextCat.v3"
labels = ["CYBERSECURITY_LLM"]
parse_responses = null
prompt_example_type = null
template = "You are an expert Text Classification system. Your task is to accept Text as input\nand provide a category for the text based on the predefined labels.\n{# whitespace #}\n{# whitespace #}\n{%- if labels|length == 1 -%}\n{%- set label = labels[0] -%}\nClassify whether the text below belongs to the {{ label }} category or not.\nIf it is a {{ label }}, answer `POS`. If it is not a {{ label }}, answer `NEG`.\nDo not put any other text in your answer, only one of 'POS' or 'NEG' with nothing before or after.\n{%- else -%}\nClassify the text below to any of the following labels: {{ labels|join(\", \") }}\n{# whitespace #}\n{# whitespace #}\n{%- if exclusive_classes -%}\nThe task is exclusive, so only choose one label from what I provided.\nDo not put any other text in your answer, only one of the provided labels with nothing before or after.\n{%- else -%}\nThe task is non-exclusive, so you can provide more than one label as long as\nthey're comma-delimited. For example: Label1, Label2, Label3.\nDo not put any other text in your answer, only one or more of the provided labels with nothing before or after.\n{%- if allow_none -%}\n{# whitespace #}\nIf the text cannot be classified into any of the provided labels, answer `==NONE==`.\n{%- endif -%}\n{%- endif -%}\n{# whitespace #}\n{%- endif -%}\n{# whitespace #}\n{%- if label_definitions -%}\n{# whitespace #}\n{# whitespace #}\nBelow are definitions of each label to help aid you in correctly classifying the text.\nAssume these definitions are written by an expert and follow them closely.\n{# whitespace #}\n{# whitespace #}\n{%- for label, definition in label_definitions.items() -%}\n{{ label }}: {{ definition }}\n{# whitespace #}\n{%- endfor -%}\n{# whitespace #}\n{%- endif -%}\n{# whitespace #}\n{%- if prompt_examples -%}\n{# whitespace #}\nBelow are some examples (only use these as a guide):\n{# whitespace #}\n{# whitespace #}\n{%- for example in prompt_examples -%}\n{# whitespace #}\nText:\n'''\n{{ example.text }}\n'''\n{# whitespace #}\n{{ example.answer }}\n{# whitespace #}\n{%- endfor -%}\n{%- endif -%}\n{# whitespace #}\n{# whitespace #}\nHere is the text that needs classification\n{# whitespace #}\n{# whitespace #}\nText:\n'''\n{{ text }}\n'''\n"
normalizer = null
exclusive_classes = false
allow_none = true
verbose = false
scorer = null

[components.llm.task.examples]
@misc = "spacy.FewShotReader.v1"
path = "configs/examples.json"

[components.llm.task.label_definitions]
CYBERSECURITY_LLM = "Clear indication that the topic of the abstract is Cybersecurity for LLMs (e.g., prompt injection, jailbreaking, adversarial attacks)"

[corpora]

[corpora.dev]
@readers = "spacy.Corpus.v1"
path = ${paths.dev}
gold_preproc = false
max_length = 0
limit = 0
augmenter = null

[corpora.train]
@readers = "spacy.Corpus.v1"
path = ${paths.train}
gold_preproc = false
max_length = 0
limit = 0
augmenter = null

[training]
seed = ${system.seed}
gpu_allocator = ${system.gpu_allocator}
dropout = 0.1
accumulate_gradient = 1
patience = 1600
max_epochs = 0
max_steps = 20000
eval_frequency = 200
frozen_components = []
annotating_components = []
dev_corpus = "corpora.dev"
train_corpus = "corpora.train"
before_to_disk = null
before_update = null

[training.batcher]
@batchers = "spacy.batch_by_words.v1"
discard_oversize = false
tolerance = 0.2
get_length = null

[training.batcher.size]
@schedules = "compounding.v1"
start = 100
stop = 1000
compound = 1.001
t = 0.0

[training.logger]
@loggers = "spacy.ConsoleLogger.v1"
progress_bar = false

[training.optimizer]
@optimizers = "Adam.v1"
beta1 = 0.9
beta2 = 0.999
L2_is_weight_decay = true
L2 = 0.01
grad_clip = 1.0
use_averages = false
eps = 0.00000001
learn_rate = 0.001

[training.score_weights]

[pretraining]

[initialize]
vectors = ${paths.vectors}
init_tok2vec = ${paths.init_tok2vec}
vocab_data = null
lookups = null
before_init = null
after_init = null

[initialize.components]

[initialize.tokenizer]